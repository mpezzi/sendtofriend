<?php

/**
 * @file
 * Provides a simple "Send to a Friend" ajax form.
 */


/**
 * Implements hook_menu().
 */
function sendtofriend_menu() {
  $items = array();
  $items['admin/config/people/sendtofriend'] = array(
    'title' => 'Send to a friend settings',
    'description' => 'Configure send to friend module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sendtofriend_admin_settings_form'),
    'access arguments' => array('administer sendtofriend settings'),
    'file' => 'sendtofriend.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_mail().
 */
function sendtofriend_mail($key, &$message, $params) {
  switch ( $key ) {
    case 'refer_message':

      // @TODO: Better way of implementing this?
      // Look for certain param values and set them up as escaped arguments for use in format_string.
      $args = array();
      foreach ( $params as $param_key => $param ) {
        if ( in_array($param_key, array('to_mail', 'from_mail', 'from_first_name', 'from_last_name', 'message', 'site_url', 'site_link')) ) {
          $args['@' . $param_key] = $param;
        }
      }

      $message['subject'] = check_plain(format_string(variable_get('sendtofriend_' . $key . '_subject', 'Send to friend subject copy'), $args));
      $message['body'][] = check_plain(format_string(variable_get('sendtofriend_' . $key . '_body', 'Send to friend body copy'), $args));

      break;
  }
}

/**
 * Implements hook_block_info().
 */
function sendtofriend_block_info() {
  $blocks = array();
  $blocks['sendtofriend'] = array(
    'info' => t('Send to a Friend'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sendtofriend_block_view($delta = '') {
  $block = array();
  if ( $delta == 'sendtofriend' ) {
    $block['subject'] = t('Send to a friend');
    $block['content'] = drupal_get_form('sendtofriend_block_form');
  }
  return $block;
}

/**
 * TK
 */
function sendtofriend_block_form($form, &$form_state) {
  $form = array(
    '#prefix' => '<div id="sendtofriend-form-wrapper">',
    '#suffix' => '</div>',
  );
  $form['to_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Friends e-mail address'),
    '#size' => 30,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['from_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Your e-mail address'),
    '#size' => 30,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['from_first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your first name'),
    '#size' => 30,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['from_last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your last name'),
    '#size' => 30,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['path'] = array(
    '#type' => 'hidden',
    '#value' => '<front>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#ajax' => array(
      'callback' => 'sendtofriend_block_form_ajax_callback',
      'wrapper' => 'sendtofriend-form-wrapper',
      'name' => 'submit1',
    ),
  );
  return $form;
}

/**
 * Validate callback for sendtofriend_block_form.
 */
function sendtofriend_block_form_validate($form, &$form_state) {
  if ( !sendtofriend_is_valid_email($form_state['values']['to_mail']) ) {
    form_set_error('to_mail', t('Please provide a valid email address.'));
  }
  if ( !sendtofriend_is_valid_email($form_state['values']['from_mail']) ) {
    form_set_error('from_mail', t('Please provide a valid email address.'));
  }
}

/**
 * Submit callback for sendtofriend_block_form.
 */
function sendtofriend_block_form_submit($form, &$form_state) {
  $message = array(
    'to_mail' => $form_state['values']['to_mail'],
    'from_mail' => $form_state['values']['from_mail'],
    'from_first_name' => $form_state['values']['from_first_name'],
    'from_last_name' => $form_state['values']['from_last_name'],
    'message' => $form_state['values']['message'],
    'site_url' => url('<front>', array('absolute' => TRUE)),
    'site_link' => url($form_state['values']['path'], array('absolute' => TRUE)),
  );

  sendtofriend_mail_send($message);
}

/**
 * TK
 */
function sendtofriend_block_form_ajax_callback($form, $form_state) {
  // Show for with validation errors.
  if ( form_get_errors() ) {
    return $form;
  }

  // Replace form with a success message.
  return array('#markup' => variable_get('sendtofriend_refer_message_success', ''));
}

/**
 * Sends an e-mail.
 */
function sendtofriend_mail_send($message) {
  $to = $message['to_mail'];
  $from = variable_get('site_mail', 'admin@example.com');
  $params = $message;
  $language = language_default();
  $send = TRUE;

  $result = drupal_mail('sendtofriend', 'refer_message', $to, $language, $params, $from, $send);
  if ( isset($result['result']) && $result['result'] == TRUE ) {
    drupal_set_message(t('Your message has been sent.'));
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }
}

/**
 * Determine if a string is a valid e-mail address.
 */
function sendtofriend_is_valid_email($string) {
  return preg_match("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$^", $string);
}
